{"version":3,"file":"flow-state.mjs","sources":["../src/flow-state.ts"],"sourcesContent":["import { filter, map, scan } from \"rxjs/operators\";\nimport { BehaviorSubject } from \"rxjs\";\nimport camelcase from \"lodash/camelcase\";\nimport curry from \"lodash/curry\";\nimport { Action } from \"./interface/action\";\nimport { CurriedReducer, Reducer } from \"./interface/reducer\";\nimport { SideEffect } from \"./interface/effects\";\n\nexport class FlowState {\n  private action$: BehaviorSubject<Action> = new BehaviorSubject({\n    type: \"INIT\"\n  });\n\n  public dispatch(action: Action): void {\n    this.action$.next(action);\n  }\n\n  public createState$(\n    reducers: any,\n    initialState: any = []\n  ): BehaviorSubject<any> {\n    const state$ = new BehaviorSubject(initialState);\n    const actionToReducer = (actionType: string): Reducer =>\n      reducers[camelcase(actionType)];\n    const hasReducerForAction = (action: Action) =>\n      !!actionToReducer(action.type);\n    const applyActionOnReducer = (action: Action): CurriedReducer => {\n      return curry(actionToReducer(action.type))(action);\n    };\n    const applyStateOnReducer = (\n      state: any,\n      reducerWithAction: CurriedReducer\n    ): any => {\n      return reducerWithAction(state);\n    };\n\n    this.action$\n      .pipe(\n        filter(hasReducerForAction),\n        map(applyActionOnReducer),\n        scan(applyStateOnReducer, initialState)\n      )\n      .subscribe(state => state$.next(state));\n\n    return state$;\n  }\n\n  public getAction$(): BehaviorSubject<Action> {\n    return this.action$;\n  }\n\n  public runSideEffects(...sideEffects: SideEffect[]) {\n    sideEffects.map(sideEffect => {\n      sideEffect(this.action$).subscribe(action => this.action$.next(action));\n    });\n  }\n}\n\nexport function createFlowState(): FlowState {\n  return new FlowState();\n}\n"],"names":["FlowState","constructor","BehaviorSubject","createFlowState","dispatch","action","action$","next","createState$","reducers","initialState","state$","actionToReducer","actionType","camelcase","pipe","filter","type","map","curry","scan","state","reducerWithAction","subscribe","getAction$","this","runSideEffects","sideEffects","sideEffect"],"mappings":"kKAQaA,EAAbC,wBAC6C,IAAIC,EAAgB,MACvD,UAgDV,SAAgBC,WACP,IAAIH,EA9CJI,YAAAA,kBAASC,QACTC,QAAQC,KAAKF,IAGbG,YAAAA,sBACLC,EACAC,kBAAoB,QAEdC,EAAS,IAAIT,EAAgBQ,GAC7BE,WAAmBC,UACvBJ,EAASK,EAAUD,iBAahBP,QACFS,KACCC,WAdyBX,WACzBO,EAAgBP,EAAOY,QAcvBC,WAb0Bb,UACrBc,EAAMP,EAAgBP,EAAOY,MAA7BE,CAAoCd,KAazCe,WAVFC,EACAC,UAEOA,EAAkBD,IAOGX,IAE3Ba,mBAAUF,UAASV,EAAOJ,KAAKc,KAE3BV,GAGFa,YAAAA,6BACEC,KAAKnB,SAGPoB,YAAAA,wFACLC,EAAYT,aAAIU,KACHH,EAAKnB,SAASiB,mBAAUlB,UAAUoB,EAAKnB,QAAQC,KAAKF"}